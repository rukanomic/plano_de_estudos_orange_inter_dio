 Aula 01 - Herança - Conceito

Herança: É o relacionamento entre classes em que uma classe chamada de subclasse (classe filha, classe derivada) é uma extensão, um subtipo, de outra classe chamada de superclasse (classe pai, classe mãe, classe base). Devido a isto, a subclasse consegue reaproveitar os atributos e métodos dela. Além dos que venham a ser herdados a subclases pode definir seus próprios membros.

Declaração: class A extends B {

            }

 Aula 02 - Herança - Tipos

 Tipos de Herança:

* Simples:

A classe filha tem só uma classe mãe

* Múltipla:

A classe ilha tem uma ou mais classes mães


 Aula 03 - Herança - Upcast e Downcast

* Upcast: Subir o tipo de classe na hierarquia.

Declaração: A a = new B();

* Downcast: Descer o tipo de classe na hierarquia.

Declaração: B a = (B) new A();


 Aula 04 - Herança - Polimorfismo e Sobrescrita

Polimorfismo: A mesma ação, se comportanto diferente. A possibilidade de um mesmo método se comportar diferente (sempre).

Sobrescrita: A mesma ação, podendo se comportar diferente. Pode ou não ser diferente (se).


 Aula 05 - Associação - Conceito

Associação: Possibilita um relacionamento entre classes/objetos, no qual estes possam pedir ajuda a outras classes/objetos e repsentar de forma completa o conceito ao qual se destinam. Neste tipo de relacionamento, as classes e os objetos interagem entre si para atingir seus objetivos.

Tipos:

* Estrutural (Relacionados aos atributos)
 - Composição
 - Agregação

* Comportamental (Relacionados aos métodos)
 - Dependência

 Aula 06 - Associação - Tipos

Estrutural:

- Composição: Com Parte Todo (Um não pode existir sem o outro)
Ex: Pessoa e Endereço

Código: class Pessoa {
          Endereco endereco;
        }


- Agragação: Sem Parte Todo (Um pode existir sem o outro)
Ex: Disciplina e Aluno

Código: class Disciplina {
          Aluno aluno;
        }


Comportamental:

- Dependência: Depende de

Código: class Compra {
          finalizar (Cupom cupom, ...) {
          }
        }


 Aula 07 - Interface - Conceito

Interface: Define um contrato que deve ser seguido pela classe que a implementa. Quando uma classe implementa uma interface, ela se compromete a realizar todos os comportamentos que a interface disponibiliza.

Código p/Criar: interface A {

                }


Código p/Implementar: class B implements A {

                      }





























